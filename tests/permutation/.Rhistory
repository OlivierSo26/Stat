knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
boxplot(list(X1_Males, X2_Femelles),
col = c("skyblue", "pink"),
notch = TRUE,
names = c("X1 Males", "X2 Femelles"),
main = "Boxplot Comparatif",
horizontal = TRUE)
X1_Males <- c(120, 107, 110, 116, 114, 111, 113, 117, 114, 112)
X2_Femelles <- c(110, 111, 107, 108, 110, 105, 107, 106, 111, 111)
X1_Males
X2_Femelles
par(mfrow=c(1, 2)) # mfrow=c(Lignes, Colonnes) n'est pas une fonction, c'est un argument
summary(X1_Males)
boxplot(X1_Males, xlab="X1_Males", horizontal = TRUE)
summary(X2_Femelles)
boxplot(X2_Femelles, xlab="X2_Femelles", horizontal = TRUE)
horizontal = TRUE
boxplot(list(X1_Males, X2_Femelles),
col = c("skyblue", "pink"),
notch = TRUE,
names = c("X1 Males", "X2 Femelles"),
main = "Boxplot Comparatif",
horizontal = TRUE)
boxplot(list(X1_Males, X2_Femelles),
col = c("skyblue", "pink"),
notch = TRUE,
names = c("X1 Males", "X2 Femelles"),
main = "Boxplot Comparatif",
horizontal = TRUE)
plot(X1_Males, X2_Femelles) # Difficile de distinguer les Mâles des Femelles :
plot(X1_Males, X2_Femelles,
col = c("skyblue", "pink"),
pch = c(16, 17),
xlab = "X1 (Males)",
ylab = "X2 (Femelles)")
# Créer un nuage de points avec la première série de données
plot(X1_Males, col = "skyblue", pch = 16, xlab = "Index", ylab = "Valeurs", main = "Nuage de Points")
# Ajouter la deuxième série de données avec une couleur différente et un autre type de marqueur
points(X2_Femelles, col = "pink", pch = 17)
ordre_X1 <- order(X1_Males)
ordre_X2 <- order(X2_Femelles)
# Créer un nuage de points avec des couleurs et des formes spécifiques
plot(X1_Males,
ordre_X1, col = "skyblue",
pch = 16,
xlab = "Valeur",
ylab = "Rang",
main = "Nuage de Points")
# Ajouter les points pour le deuxième vecteur
points(X2_Femelles, ordre_X2, col = "pink", pch = 17)
ordre_X <- order(c(X1_Males, X2_Femelles)) # Mais si je les Pool, je perds le sexe...sauf si j'ajoute le factor MF
# Créer des facteurs pour chaque série
facteur_X1 <- rep("Males", length(X1_Males))
facteur_X2 <- rep("Femelles", length(X2_Femelles))
# Combiner les données et les facteurs
donnees <- data.frame(Valeurs = c(X1_Males, X2_Femelles), Genre = c(facteur_X1, facteur_X2))
# Créer un nuage de points avec des couleurs spécifiques pour chaque facteur
plot(donnees$Valeurs, col = ifelse(donnees$Genre == "Males", "skyblue", "pink"), pch = ifelse(donnees$Genre == "Males", 16, 17), xlab = "Index", ylab = "Valeurs", main = "Nuage de Points")
# Ajouter une légende
legend("topright", legend = c("Males", "Femelles"), col = c("skyblue", "pink"), pch = c(16, 17))
# Créer des facteurs pour chaque série
facteur_X1 <- rep("Males", length(X1_Males))
facteur_X2 <- rep("Femelles", length(X2_Femelles))
# Combiner les données et les facteurs
donnees <- data.frame(Valeurs = c(X1_Males, X2_Femelles), Genre = c(facteur_X1, facteur_X2))
# Obtenir l'ordre des indices triés
ordre_indices <- order(donnees$Valeurs)
# Réorganiser les données en fonction de l'ordre croissant des valeurs
donnees <- donnees[ordre_indices, ]
# Créer un nuage de points avec des couleurs spécifiques pour chaque facteur
plot(donnees$Valeurs, col = ifelse(donnees$Genre == "Males", "skyblue", "pink"), pch = ifelse(donnees$Genre == "Males", 16, 17), xlab = "Index", ylab = "Valeurs", main = "Nuage de Points")
# Ajouter une légende
legend("topright", legend = c("Males", "Femelles"), col = c("skyblue", "pink"), pch = c(16, 17))
# Créer un boxplot comparatif
boxplot(list(Groupe1 = vecteur1, Groupe2 = vecteur2),
col = c("red", "blue"),
notch = TRUE,
names = c("Groupe 1", "Groupe 2"),
main = "Boxplot Comparatif")
boxplot(list(Groupe1 = vecteur1, Groupe2 = vecteur2), col = c("red", "blue"), notch = TRUE, names = c("Groupe 1", "Groupe 2"), main = "Boxplot Comparatif", horizontal = TRUE)
# Créer un boxplot comparatif
boxplot(list(Groupe1 = X1_Males, Groupe2 = X2_Femelles),
col = c("red", "blue"),
notch = TRUE,
names = c("Groupe 1", "Groupe 2"),
main = "Boxplot Comparatif")
boxplot(list(Groupe1 = X1_Males, Groupe2 = X2_Femelles), col = c("red", "blue"), notch = TRUE, names = c("Groupe 1", "Groupe 2"), main = "Boxplot Comparatif", horizontal = TRUE)
# Créer deux vecteurs de données indépendants
vecteur1 <- c(23, 45, 67, 34, 56, 78, 90, 12, 43, 65)
vecteur2 <- c(45, 67, 12, 78, 23, 56, 90, 34, 65, 43)
# Créer une matrice avec les deux vecteurs
donnees <- matrix(c(vecteur1, vecteur2), ncol = 2)
# Nommer les colonnes
colnames(donnees) <- c("Groupe 1", "Groupe 2")
# Créer un boxplot comparatif
boxplot(donnees, col = c("red", "blue"), notch = TRUE, names = c("Groupe 1", "Groupe 2"), main = "Boxplot Comparatif")
# Créer deux vecteurs de données
X1_Males <- c(15, 30, 45, 60, 75)
X2_Femelles <- c(25, 40, 55, 70, 85)
# Obtenir l'ordre des valeurs pour chaque vecteur (optionnel)
ordre_X1 <- order(X1_Males)
ordre_X2 <- order(X2_Femelles)
# Créer un nuage de points avec des couleurs et des formes spécifiques
plot(X1_Males[ordre_X1], ordre_X1, col = "skyblue", pch = 16, xlab = "Valeur", ylab = "Rang", main = "Nuage de Points")
# Ajouter les points pour le deuxième vecteur
points(X2_Femelles[ordre_X2], ordre_X2, col = "pink", pch = 17)
# Ajouter une légende
legend("topright", legend = c("X1 (Males)", "X2 (Femelles)"), col = c("skyblue", "pink"), pch = c(16, 17))
knitr::opts_chunk$set(echo = TRUE)
plot(Skulls)
Skulls <- c(56.6, 54.9, 57.7, 56.8, 57.7, 55.6, 57.7, 56.1, 54.8, 55.9)
rm(list = ls())
Skulls <- c(56.6, 54.9, 57.7, 56.8, 57.7, 55.6, 57.7, 56.1, 54.8, 55.9)
plot(Skulls)
Skulls_echant <- c(56.6, 54.9, 57.7, 56.8, 57.7, 55.6, 57.7, 56.1, 54.8, 55.9)
Sapiens_ref <- rnorm(1000, mean = 58, sd = 1.5)
hist(Skulls_echant)
hist(Skulls_echant, nclass = 10)
hist(Skulls_echant, nclass = 10)
rm(Skulls)
hist(Skulls_echant)
line(Skulls_echant)
hist(Skulls_echant)
line(Skulls_echant)
hist(Skulls_echant)
# Estimer la densité de probabilité
dens <- density(Skulls_echant)
# Ajouter la courbe estimée à l'histogramme
lines(dens, col = "red", lwd = 2)
densRef <- density(Sapiens_ref)
hist(Skulls_echant)
# Estimer la densité de probabilité
dens <- density(Skulls_echant)
# Ajouter la courbe estimée à l'histogramme
lines(dens, col = "red", lwd = 2)
densRef <- density(Sapiens_ref)
lines(densRef, col = "darkgrey", lwd = 3)
hist(Skulls_echant)
# Estimer la densité de probabilité
dens <- density(Skulls_echant)
# Ajouter la courbe estimée à l'histogramme
lines(dens, col = "red", lwd = 2)
densRef <- density(Sapiens_ref)
lines(densRef, col = "black", lwd = 4)
hist(Skulls_echant)
# Estimer la densité de probabilité
dens <- density(Skulls_echant)
# Ajouter la courbe estimée à l'histogramme
lines(dens, col = "red", lwd = 2)
# Ajout de la Loi Normale de Population Connue
densRef <- density(Sapiens_ref)
lines(densRef, col = "black", lwd = 5)
lines(densRef, col = "black", lwd = 5, lty = 2) # lwd = épaisseur
hist(Skulls_echant)
# Estimer la densité de probabilité
dens <- density(Skulls_echant)
# Ajouter la courbe estimée à l'histogramme
lines(dens, col = "red", lwd = 2)
# Ajout de la Loi Normale de Population Connue
densRef <- density(Sapiens_ref)
lines(densRef, col = "black", lwd = 5, lty = 2) # lwd = épaisseur
hist(Skulls_echant)
# Estimer la densité de probabilité
densEchant <- density(Skulls_echant)
# Ajouter la courbe estimée à l'histogramme
lines(densEchant, col = "red", lwd = 2)
# Ajout de la Loi Normale de Population Connue
densRef <- density(Sapiens_ref)
lines(densRef, col = "black", lwd = 5, lty = 2) # lwd = épaisseur, lty = 2 Pointillés
hist(densRef)
hist(Sapiens_ref)
lines(densRef, col = "black" )
lines(densEchant, col = "red" )
# Données de référence
Sapiens_ref <- c(60, 62, 63, 61, 64, 62, 63, 61, 64, 62)
# Données de l'échantillon
Skulls_echant <- c(56.6, 54.9, 57.7, 56.8, 57.7, 55.6, 57.7, 56.1, 54.8, 55.9)
# Créer le premier histogramme de référence
hist(Sapiens_ref, col = "lightblue", main = "Comparaison des Histogrammes", xlab = "Taille des crânes")
# Estimer la densité de probabilité pour le premier histogramme
densRef <- density(Sapiens_ref)
# Ajouter la courbe estimée pour le premier histogramme
lines(densRef, col = "black", lwd = 2)
# Créer le deuxième histogramme pour l'échantillon avec la même échelle
hist(Skulls_echant, col = "pink", add = TRUE)
# Estimer la densité de probabilité pour le deuxième histogramme
densEchant <- density(Skulls_echant)
# Ajouter la courbe estimée pour le deuxième histogramme
lines(densEchant, col = "red", lty = 2, lwd = 2)
# Légende
legend("topright", legend = c("Référence", "Échantillon"), col = c("black", "red"), lty = c(1, 2), lwd = 2)
crane<-c(56.6,54.9,57.7,56.8,57.7,56.8,57.7,55.6,57.7,56.1)
mobs<-mean(crane)
mobs
etobs<-sd(crane) #ecart-type estimé pour la CC de la population dont est issu l'échantillon
etobs
Mu<-58  #moyenne theorique de Y pour Homo sapiens sapiens
hist(crane, proba=T, col="lightgreen")
crane<-c(56.6,54.9,57.7,56.8,57.7,56.8,57.7,55.6,57.7,56.1)
mobs<-mean(crane)
mobs
etobs<-sd(crane) #ecart-type estimé pour la CC de la population dont est issu l'échantillon
etobs
Mu<-58  #moyenne theorique de Y pour Homo sapiens sapiens
hist(crane, proba=T, col="lightgreen")
hist(Skulls_echant, proba=T)
# Estimer la densité de probabilité
densEchant <- density(Skulls_echant)
# Ajouter la courbe estimée à l'histogramme
lines(densEchant, col = "red", lwd = 2)
# Ajout de la Loi Normale de Population Connue
densRef <- density(Sapiens_ref)
lines(densRef, col = "black", lwd = 5, lty = 2) # lwd = épaisseur, lty = 2 Pointillés
shapiro.test(crane)        # donc le test ne contredit pas la normalité de CC
x<-seq(53,59,le=100)
lines(x,dnorm(x,mobs,etobs), col="red")  # normalité donc
crane<-c(56.6,54.9,57.7,56.8,57.7,56.8,57.7,55.6,57.7,56.1)
mobs<-mean(crane)
mobs
etobs<-sd(crane) #ecart-type estimé pour la CC de la population dont est issu l'échantillon
etobs
Mu<-58  #moyenne theorique de Y pour Homo sapiens sapiens
hist(crane, proba=T, col="lightgreen")
shapiro.test(crane)        # donc le test ne contredit pas la normalité de CC
x<-seq(53,59,le=100)
lines(x,dnorm(x,mobs,etobs), col="red")  # normalité donc
crane<-c(56.6,54.9,57.7,56.8,57.7,56.8,57.7,55.6,57.7,56.1)
mobs<-mean(crane)
mobs
etobs<-sd(crane) #ecart-type estimé pour la CC de la population dont est issu l'échantillon
etobs
Mu<-58  #moyenne theorique de Y pour Homo sapiens sapiens
hist(crane, proba=T, col="lightgreen")
shapiro.test(crane)        # donc le test ne contredit pas la normalité de CC
x<-seq(53,59,le=100)
lines(x,dnorm(x,mobs,etobs), col="red")  # normalité donc
t.test(crane,mu=Mu)
shapiro.test(crane)        # donc le test ne contredit pas la normalité de CC
epsobs<-(mean(crane)-58)/(1.5/sqrt(10)) #la variance pop est connue sous H0= Y suit une loi normale(mu=58, sigma=1.5)
epsobs #ce n'est pas la stat calculée par le t.test qui doit plutot utiliser l'ecart-type estimé à partir de l'echantillon
tobs<-(mobs-58)/(etobs/sqrt(10))  #on refait le test t en considérant la variance pop inconnue (on utilise la var estimée)
tobs # ok
epsobs<-(mean(crane)-58)/(1.5/sqrt(10)) # la variance pop est connue sous H0= Y suit une loi normale(mu=58, sigma=1.5)
epsobs # ce n'est pas la stat calculée par le t.test qui doit plutot utiliser l'ecart-type estimé à partir de l'echantillon
tobs<-(mobs-58)/(etobs/sqrt(10))  # on refait le test t en considérant la variance pop inconnue (on utilise la var estimée)
tobs # ok
N<-100 #nombre de familles
n<-20  #nombre d'individus par famille
N*n    #nombre d'individus dans la population
F<-gl(N,n)
head(F)
length(F)
table(F)  #Effectif dans chaque famille
class(F)
levels(F) # numéros des familles
sigma<-sd(crane) #ecart-type estimé de la famille dont sont issus les 10 crânes
sigma
sigma^2 # variance estimée intra-famille (si toutes les familles ont même variance)
1.5^2   #variance théorique de la circonférence crânienne pour la population d'Homo sapiens
sigmaF<-sqrt(1.5^2-sigma^2) #Ecart-type des valeurs moyennes au sein des familles
muF<-round(rnorm(N,Mu,sigmaF),2) #on tire 100 moyennes de famille (Soit 1 par famille dans la population fictive)
muF
hist(muF)
length(muF)
length(muF[F])  #on attribue à chaque individu de la population sa moyenne familiale (en créant 20 répétitions de chacune des 100 moyennes de muF)
muF[F][1:20]   #Famille 1
muF[F][21:40] #Famille 2...
epsilon<-round(rnorm(N*n,0,sigma),2) # on tire au sort une valeur résiduelle pour chacun des 2000 individus de la population
Y<-muF[F]+epsilon   # on reconstitue la valeur de CC individuelle dans la population fictive structurée en familles
Mu+0 #la moyenne des tailles individuelles est la somme de la moyenne des moyennes des familles et de la moyenne des résidus
sqrt(sigmaF^2+sigma^2) # et voici l'écart-type des cc de la population fictive (=écart-type de CC d'Homo sapiens)
S<-sample(2000,10) #tirage sans remise de 10 individus dans la population, via leur rang
S
Y[S]    # circonference cranienne des individus dont les rangs dans la liste sont fournis par S
t.test(Y[S],mu=Mu)    # test de conformité à la moyenne théorique d'Homo sapiens
S<-sample(2000,10) #tirage sans remise de 10 individus dans la population, via leur rang
S
Y[S]    # circonference cranienne des individus dont les rangs dans la liste sont fournis par S
t.test(Y[S],mu=Mu)    # test de conformité à la moyenne théorique d'Homo sapiens
distTobs<-replicate(10000, t.test(Y[sample(2000,10)], mu=Mu)$stat) #on répète 10 000 fois l'échantillonnage et le test t
distTobs<-replicate(10000, t.test(Y[sample(2000,10)], mu=Mu)$stat) #on répète 10 000 fois l'échantillonnage et le test t
par(mfrow=c(2,1)) #on installe une fenêtre à 2 graphiques
hist(distTobs, main="tirage aléatoire simple dans toute la population")
abline(v=qt(0.025, 9), col="red")
mtext("-tseuil",side=1,line=1, at=qt(0.025, 9), col="red", cex=0.7)
abline(v=qt(0.975, 9), col="red")
mtext("tseuil",side=1,line=1, at=qt(0.975, 9), col="red", cex=0.7)  #la valeur seuil pour une loi de student à 9ddl correspond au 97.5e percentile
sum(abs(distTobs) > qt(0.975, 9))/10000                             # parmi les 10 000 échantillons aléatoires de 10 individus dans la population fictive d'Homo sapiens
# proportion des tests t conduisant -à tort donc- au rejet de H0 (conformité avec µ0=58cm)
f<-sample(N,1) #on tire au sort une famille parmi N=100
f
Yf<-Y[F==f] #toutes les valeurs de Y de la famille f (il y en a 20)
Yf
rang10<-sample(n,10) # tirage de 10 rangs parmi n=20 (pour tirage de 10 individus dans la famille Yf)
rang10
echf<-Yf[rang10] #les 10 valeurs de CC issues des rangs fournis par l'objet rang10
t.test(echf,mu=Mu)
Y[F==sample(N,1)][sample(n,10)]  #les étapes précedentes en 1 seule commande (on tire au sort 10 individus dans une famille elle-même tirée au sort)
distTobsf<-replicate(10000,t.test(Y[F==sample(N,1)][sample(n,10)],mu=Mu)$stat) #on répète 10000 fois l'échantillonnage et le test t de conformité
par(mfrow=c(1,1))
hist(distTobsf, main="tirage aléatoire intra-famille", proba=T, ylim=c(0, dt(0,9)))
abline(v=qt(0.025, 9), col="red")
mtext("-tseuil",side=1,line=1, at=qt(0.025, 9), col="red", cex=0.7)
abline(v=qt(0.975, 9), col="red")
mtext("tseuil",side=1,line=1, at=qt(0.975, 9), col="red", cex=0.7)
sum(abs(distTobsf) > qt(0.975, 9))/10000 # pourcentage de rejet à tort de H0= l'échantillon est issu d'Homo sapiens sapiens
x<-seq(-11, 11, le=400)
lines(x, dt(x, 9), col="red")
Y[F==sample(N,1)][sample(n,10)]  #les étapes précedentes en 1 seule commande (on tire au sort 10 individus dans une famille elle-même tirée au sort)
distTobsf<-replicate(10000,t.test(Y[F==sample(N,1)][sample(n,10)],mu=Mu)$stat) #on répète 10000 fois l'échantillonnage et le test t de conformité
par(mfrow=c(1,1))
hist(distTobsf, main="tirage aléatoire intra-famille", proba=T, ylim=c(0, dt(0,9)))
abline(v=qt(0.025, 9), col="red")
mtext("-tseuil",side=1,line=1, at=qt(0.025, 9), col="red", cex=0.7)
abline(v=qt(0.975, 9), col="red")
mtext("tseuil",side=1,line=1, at=qt(0.975, 9), col="red", cex=0.7)
sum(abs(distTobsf) > qt(0.975, 9))/10000 # pourcentage de rejet à tort de H0= l'échantillon est issu d'Homo sapiens sapiens
## loi suivie a priori par la statistique tobs si H0 est vraie: student à 9ddl
x<-seq(-11, 11, le=400)
lines(x, dt(x, 9), col="red")
Y[F==sample(N,1)][sample(n,10)]  #les étapes précedentes en 1 seule commande (on tire au sort 10 individus dans une famille elle-même tirée au sort)
distTobsf<-replicate(10000,t.test(Y[F==sample(N,1)][sample(n,10)],mu=Mu)$stat) #on répète 10000 fois l'échantillonnage et le test t de conformité
par(mfrow=c(1,1))
hist(distTobsf, main="tirage aléatoire intra-famille", proba=T, ylim=c(0, dt(0,9)))
abline(v=qt(0.025, 9), col="red")
mtext("-tseuil",side=1,line=1, at=qt(0.025, 9), col="red", cex=0.7)
abline(v=qt(0.975, 9), col="red")
mtext("tseuil",side=1,line=1, at=qt(0.975, 9), col="red", cex=0.7)
sum(abs(distTobsf) > qt(0.975, 9))/10000 # pourcentage de rejet à tort de H0= l'échantillon est issu d'Homo sapiens sapiens
## loi suivie a priori par la statistique tobs si H0 est vraie: student à 9ddl
x<-seq(-11, 11, le=400)
lines(x, dt(x, 9), col="red")
Y[F==sample(N,1)][sample(n,10)]  #les étapes précedentes en 1 seule commande (on tire au sort 10 individus dans une famille elle-même tirée au sort)
distTobsf<-replicate(10000,t.test(Y[F==sample(N,1)][sample(n,10)],mu=Mu)$stat) #on répète 10000 fois l'échantillonnage et le test t de conformité
par(mfrow=c(1,1))
hist(distTobsf, main="tirage aléatoire intra-famille", proba=T, ylim=c(0, dt(0,9)))
abline(v=qt(0.025, 9), col="red")
mtext("-tseuil",side=1,line=1, at=qt(0.025, 9), col="red", cex=0.7)
abline(v=qt(0.975, 9), col="red")
mtext("tseuil",side=1,line=1, at=qt(0.975, 9), col="red", cex=0.7)
sum(abs(distTobsf) > qt(0.975, 9))/10000 # pourcentage de rejet à tort de H0= l'échantillon est issu d'Homo sapiens sapiens
## loi suivie a priori par la statistique tobs si H0 est vraie: student à 9ddl
x<-seq(-11, 11, le=400)
lines(x, dt(x, 9), col="red")
Y[F==sample(N,1)][sample(n,10)]  #les étapes précedentes en 1 seule commande (on tire au sort 10 individus dans une famille elle-même tirée au sort)
distTobsf<-replicate(10000,t.test(Y[F==sample(N,1)][sample(n,10)],mu=Mu)$stat) #on répète 10000 fois l'échantillonnage et le test t de conformité
par(mfrow=c(1,1))
hist(distTobsf, main="tirage aléatoire intra-famille", proba=T, ylim=c(0, dt(0,9)))
abline(v=qt(0.025, 9), col="red")
mtext("-tseuil",side=1,line=1, at=qt(0.025, 9), col="red", cex=0.7)
abline(v=qt(0.975, 9), col="red")
mtext("tseuil",side=1,line=1, at=qt(0.975, 9), col="red", cex=0.7)
sum(abs(distTobsf) > qt(0.975, 9))/10000 # pourcentage de rejet à tort de H0= l'échantillon est issu d'Homo sapiens sapiens
## loi suivie a priori par la statistique tobs si H0 est vraie: student à 9ddl
x<-seq(-11, 11, le=400)
lines(x, dt(x, 9), col="red")
t.test(crane,mu=Mu)$stat
abline(v=tobs, col="blue")
Y[F==sample(N,1)][sample(n,10)]  #les étapes précedentes en 1 seule commande (on tire au sort 10 individus dans une famille elle-même tirée au sort)
distTobsf<-replicate(10000,t.test(Y[F==sample(N,1)][sample(n,10)],mu=Mu)$stat) #on répète 10000 fois l'échantillonnage et le test t de conformité
par(mfrow=c(1,1))
hist(distTobsf, main="tirage aléatoire intra-famille", proba=T, ylim=c(0, dt(0,9)))
abline(v=qt(0.025, 9), col="red")
mtext("-tseuil",side=1,line=1, at=qt(0.025, 9), col="red", cex=0.7)
abline(v=qt(0.975, 9), col="red")
mtext("tseuil",side=1,line=1, at=qt(0.975, 9), col="red", cex=0.7)
sum(abs(distTobsf) > qt(0.975, 9))/10000 # pourcentage de rejet à tort de H0= l'échantillon est issu d'Homo sapiens sapiens
## loi suivie a priori par la statistique tobs si H0 est vraie: student à 9ddl
x<-seq(-11, 11, le=400)
lines(x, dt(x, 9), col="red")
#que se passe-t-il si on conclut sur la base de notre échantillon et de ce test de conformité à mu=58?
## H0: µ=µ0(=58cm)  les individus sont issus d'une population dont la circonférence cranienne moyenne =58 (comme Homo sapiens)
t.test(crane,mu=Mu)$stat
abline(v=tobs, col="blue")
mtext("tobs",side=1,line=1, at=tobs, col="blue", cex=0.7)
abline(v=-tobs, col="blue")
mtext("-tobs",side=1,line=1, at=-tobs, col="blue", cex=0.7)
(sum((distTobsf) > -tobs)+sum((distTobsf) < tobs))/10000 # probabilité critique d'obtenir, sous H0 et sa véritable distribution de la stat tobs (histogramme)
Y[F==sample(N,1)][sample(n,10)]  #les étapes précedentes en 1 seule commande (on tire au sort 10 individus dans une famille elle-même tirée au sort)
distTobsf<-replicate(10000,t.test(Y[F==sample(N,1)][sample(n,10)],mu=Mu)$stat) #on répète 10000 fois l'échantillonnage et le test t de conformité
par(mfrow=c(1,1))
hist(distTobsf, main="tirage aléatoire intra-famille", proba=T, ylim=c(0, dt(0,9)))
abline(v=qt(0.025, 9), col="red")
mtext("-tseuil",side=1,line=1, at=qt(0.025, 9), col="red", cex=0.7)
abline(v=qt(0.975, 9), col="red")
mtext("tseuil",side=1,line=1, at=qt(0.975, 9), col="red", cex=0.7)
sum(abs(distTobsf) > qt(0.975, 9))/10000 # pourcentage de rejet à tort de H0= l'échantillon est issu d'Homo sapiens sapiens
## loi suivie a priori par la statistique tobs si H0 est vraie: student à 9ddl
x<-seq(-11, 11, le=400)
lines(x, dt(x, 9), col="red")
#que se passe-t-il si on conclut sur la base de notre échantillon et de ce test de conformité à mu=58?
## H0: µ=µ0(=58cm)  les individus sont issus d'une population dont la circonférence cranienne moyenne =58 (comme Homo sapiens)
t.test(crane,mu=Mu)$stat
abline(v=tobs, col="blue")
mtext("tobs",side=1,line=1, at=tobs, col="blue", cex=0.7)
abline(v=-tobs, col="blue")
mtext("-tobs",side=1,line=1, at=-tobs+1, col="blue", cex=0.7)
(sum((distTobsf) > -tobs)+sum((distTobsf) < tobs))/10000 # probabilité critique d'obtenir, sous H0 et sa véritable distribution de la stat tobs (histogramme)
Y[F==sample(N,1)][sample(n,10)]  #les étapes précedentes en 1 seule commande (on tire au sort 10 individus dans une famille elle-même tirée au sort)
distTobsf<-replicate(10000,t.test(Y[F==sample(N,1)][sample(n,10)],mu=Mu)$stat) #on répète 10000 fois l'échantillonnage et le test t de conformité
par(mfrow=c(1,1))
hist(distTobsf, main="tirage aléatoire intra-famille", proba=T, ylim=c(0, dt(0,9)))
abline(v=qt(0.025, 9), col="red")
mtext("-tseuil",side=1,line=1, at=qt(0.025, 9), col="red", cex=0.7)
abline(v=qt(0.975, 9), col="red")
mtext("tseuil",side=1,line=1, at=qt(0.975, 9), col="red", cex=0.7)
sum(abs(distTobsf) > qt(0.975, 9))/10000 # pourcentage de rejet à tort de H0= l'échantillon est issu d'Homo sapiens sapiens
## loi suivie a priori par la statistique tobs si H0 est vraie: student à 9ddl
x<-seq(-11, 11, le=400)
lines(x, dt(x, 9), col="red")
#que se passe-t-il si on conclut sur la base de notre échantillon et de ce test de conformité à mu=58?
## H0: µ=µ0(=58cm)  les individus sont issus d'une population dont la circonférence cranienne moyenne =58 (comme Homo sapiens)
t.test(crane,mu=Mu)$stat
abline(v=tobs, col="blue")
mtext("tobs",side=1,line=1, at=tobs-1, col="blue", cex=0.7)
abline(v=-tobs, col="blue")
mtext("-tobs",side=1,line=1, at=-tobs+1, col="blue", cex=0.7)
(sum((distTobsf) > -tobs)+sum((distTobsf) < tobs))/10000 # probabilité critique d'obtenir, sous H0 et sa véritable distribution de la stat tobs (histogramme)
setwd("D:/OneDrive - etu.univ-lyon1.fr/STATS/Stat/tests/permutation")
